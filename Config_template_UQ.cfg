# Tommy's new config file, up to date as of 8.5.25
# Note that you can't make inline comments, but otherwise # works just fine
####################################################################################################################################################################################
# Controls "structural" options that define whole simulation
[Options]

# [Int] The number of iterations to run, Num_iters*Time_step gives total duration, unless object demises (is destroyed) first
Num_iters = 3000

# [True/False] TITAN generates a file '/Output_folder/Restart/mesh.p' on startup, this can take some time if your mesh is large, if the file already exists TITAN can load it instead
Load_mesh = True

# [True/False] Every Save_freq TITAN generates a restart file (/Output_folder/Restart/Assembly_State.p), if Load_state is True the simulation will start from that iter
Load_state = False
### NB: If both Load_mesh and Load_state are set to False TITAN will wipe Output_folder and generate a fresh one

# [High/Low/Multi] Defines the fidelity level to simulate with, sections [SU2], [Bloom], [AMG] and [Mesh] only apply if High or Multifidelity is set
Fidelity = Low

# For more info on Multifidelity see paper...
# pure.strath.ac.uk/ws/portalfiles/portal/137646838/Morgado_etal_Scitech_2022_Multi_fidelity_approach_for_aerodynamic_modelling_and_simulation_of_uncontrolled_atmospheric.pdf

# [Path] Directory to write the files to
Output_folder = /home/ckb18135/uq/test

# [Int] How frequently should TITAN generate restart files?
Save_freq = 500

# [Int] How frequently should TITAN generate solution files?
Output_freq = 1

# [True/False] If set to false TITAN will remove large solution files as it creates them, defaults to true, inoperable unless using the uq_dev branch from github
Write_solutions = True

# [True/False] Enables the [Collision] section and allows bodies to collide elastically
Collision = False

####################################################################################################################################################################################
# Controls thermal options that define how ablation and heating are modelled
[Thermal]

# [True/False] Enables mass loss through ablation
Ablation = True

# [Tetra/0d/pato] Method of ablation modelling, PATO details in PATO block,tetra deletes tetrahedral elements of body, 0d considers only lumped mass models
Ablation_mode = pato

### NB: Tetra ablation can create issues in complex assemblies and PATO requires installation of NASA-PATO software and openfoam (github.com/nasa/pato)

####################################################################################################################################################################################
# Controls collision parameters (note implementation with new dynamics is unverified)
[Collision]

# [Int] If collision is enabled, after fragmentation Time_step will slow to Post_fragmentation_timestep for a duration of Post_fragmentation_iters in order to accurately capture collisions
Post_fragmentation_iters = 200

# [Float (s)] This value needs to be small to prevent fast objects from phasing through things
Post_fragmentation_timestep = 1e-3

# [Float] This represents a factor to "grow" the meshes of objects by to ensure collisions aren't complicated by thin surfaces
Mesh_factor = 1e-4

####################################################################################################################################################################################
# Controls time integration and dynamics parameters
[Time]

# [Float (s)] The time step used in the dynamics integrator
Time_step = 1.0

# [True/False] The boolean to wrap the dynamics propagation in an Unscented Transform for uncertainty propagation, inoperable unless using the uq_dev branch from github (currently deprecated)
Wrap_propagator = False

Time_integration = AB5
# ^ [euler/bwd/AB2/AB3/AB4/AB5/RK4/RK23/RK45/DOP853] Time integration method
# Constant time methods: Euler, backward difference, Adams-Bashforth 2-5, Runge Kutta 4
# Adaptive time methods: RK23, RK45, DOP853

####################################################################################################################################################################################
[Trajectory]
# ^ Controls initial conditions for trajectory

Altitude = 120000
# ^ [Float (m)] Altitude above the Earth
Velocity = 7899.595008662054
# ^ [Float (m/s)] Velocity magnitude along vector defined by Flight_path_angle and Heading_angle
Flight_path_angle = -5
# ^ [Float (deg)] Angle of velocity vector above/below horizon
Heading_angle = 4.988254840798145
# ^ [Float (deg)] Angle velocity vector in reference to due North (defined as 0 deg) and with due East as 90 deg
Latitude = 0.31314158424520677
# ^ [Float (deg)] Latitude
Longitude = 123.27373376128185
# ^ [Float (deg)] Longitude

####################################################################################################################################################################################
[Model]
# ^ Controls vehicular and planetary options

Planet = Earth
# ^ [Earth/Neptune/Jupiter] Name of the planet to run the simulation, defaults to Earth
Vehicle = False
# ^ [True/False] If True override TITAN Mass and Nose_radius computation with those provided in [Vehicle]
Drag_model = False
# ^ [True/False] If True override TITAN drag and Area_reference computation with values provided in [Vehicle]


####################################################################################################################################################################################
[Vehicle]
# ^ Controls vehicle parameters if specified in [Model]

Mass = 100
# ^ [Float (kg)] The mass of the vehicle
Nose_radius = 1
# ^ [Float (m)] Nose radius of the vehicle for stagnation heatflux computation
Area_reference = 1
# ^ [Float (m^2)] Area of reference for drag model (if Drag_model = True)
Drag_file = Galileo_CD.csv
# [Path (.csv)] Path to drag model file containing the Mach vs drag coefficient information, located TITAN/Model/Drag

####################################################################################################################################################################################
[Aerothermo]
# ^ This section controls low fideltiy heat flux computation in TITAN according to various models from literature

Heat_model = vd
# ^ [vd/sc/fr/fr_noncat/fr_parcat/sg] Heat flux computation model, Van-Driest, SCARAB, Fay-Riddell for fully, partially and non-catalytic and Sutton-Graves
Vel_grad = fr
# ^ [FR/Linnel/Newton/Stokes/Olivier] Calculate velocity gradient according to the following method, default is FR
Standoff  = Billig
# ^ [Freeman/Billig/Lobb/Serbin/Probstein] Calculate shock standoff according to the following method, default is Billig
Catalicity_method = Constant
# ^ [Constant/Material] Can define per-material Catalicity_rate in the material file, otherwise a constant value, default is constant
Catalicity_rate   = 1.0
# ^ [Float [0.0 - 1.0] Rate of recombination at wall if Catalicity_method is constant
Level_division = 0
# ^ [Int] If >0 recursively subdivide mesh tris n times before calculating aero properties for increased accuracy
####################################################################################################################################################################################
[Mesh]
# ^ Controls meshing for high fidelity

Far_size = 0.2
# ^ [Float] Mesh sizing for farfield
Surf_size = 0.5
# ^ [Float] Mesh sizing for surface

####################################################################################################################################################################################
[AMG]
# ^ Controls adaptive mesh generation (AMG), requires pyamg and some other stuff

Flag = True
# ^ [True/False] Determines whether to run AMG
Sensor = Mach
# ^ [solution file header] Name of header in solution file generated by SU2 to use for adaptation, steep gradients in the sensor value result in mesh refinement in those areas

####################################################################################################################################################################################
[Bloom]
# ^ Controls boundary layer mesh generation, requires Bloom

Flag =  True
# ^ [True/False] Determines whether to generate BL
Layers = 15
# ^ [Int] Number of layers to generate
Spacing = 0.001
# ^ [Float] Initial layer thickness
Growth_Rate = 1.05
# ^ [Float] Power to scale layers by, conventionally ~1.2

####################################################################################################################################################################################
[PATO]
# ^ Controls settings for SU2

Time_step = 0.1
# ^ [Float (s)] PATO timestep, can agree with TITAN timestep
N_cores = 2
# ^ [Int (â‰¥2)] Must be greater than or equal to 2, much to Tommy's irritation
Solution_type = Volume
# ^ [Surface/Volume] Extract only surface information or temperature distribution across whole volume?

####################################################################################################################################################################################
[SU2]
# ^ Controls settings for SU2

Num_iters = 10000
# ^ [Int] Number of SU2 iterations to run, can (and should) finish early if solution is converged
Solver = NEMO_NAVIER_STOKES
# ^ [EULER/NAVIER_STOKES/NEMO_EULER/NEMO_NAVIER_STOKES] Solver to use, NEMO for non-equilibrium chemistry, Navier-Stokes for viscosity, heat flux etc
Conv_method = AUSM
# ^ [See SU2 Manual] Numerical scheme to use, AUSM considered most stable/reliable
Muscl = NO
# ^ [YES/NO] Whether or not to use MUSCL
Adapt_iter = 3
# ^ [Int] Number of mesh adaptations to do
CFL = 0.1
# ^ [Float] Courant-Friedrichs-Lewy Number, should be less than 0.5 for most hypersonic cases
Num_cores = 16
# ^ [Int] Number of cores to use for SU2, code parallelises reasonably well

####################################################################################################################################################################################
[Assembly]
# ^ Controls connectivity between objects

Path = Examples/Geometry/Multibody/
# ^ [Path] Path for the geometry files, make sure you include a trailing '/'
Connectivity = [[1,2,3]]
# ^ [Matrix] Defined as an Nx3 matrix of object ids (their location in the Objects list, starting at 1) for N connections with the syntax "1 and 2 are connected by 3" e.g....
#  [ [id of obj1 for connection1,id of obj2 for connection1,id of joint for connection1], [id of obj1 for connection2,id of obj2 for connection2,id of joint for connection2]... ]
Sideslip = 0.0
# ^ [Float (deg)] Sideslip of assembly
Angle_of_attack = 0.0
# ^ [Float (deg)] Angle of attack of assembly
Roll = 0.0
# ^ [Float (deg)] Roll of assembly

####################################################################################################################################################################################
[Objects]
# ^ Controls objects used in assembly, given by the following form...

#For primitives... name_Marker = (name_file, type_file, material, Fenics bc type)
#For joints... name_Marker = (name_file, type_file, material, Inner_stl, trigger tpe, trigger value, Fenics bc type)

cube_A = [NAME = Cube_A.stl,         TYPE = Primitive,   MATERIAL = Unittest,   FENICS_ID = 1]
cube_B = [NAME = Cube_B.stl,         TYPE = Primitive,   MATERIAL = Unittest,   FENICS_ID = 1]
joint = [NAME = Joint.stl,         TYPE = Joint,   MATERIAL = Unittest,   FENICS_ID = 1, TRIGGER_TYPE = ALTITUDE, TRIGGER_VALUE = 78000, FENICS_ID = 1]
# Trigger options are [ALTITUDE/TEMPERATURE/STRESS/ITERATION]
# Fenics structural dynamics (which requires FENICS_ID and is required for STRESS triggers) still requires development
# Material files can be found at TITAN/Material

####################################################################################################################################################################################
[Initial Conditions]
# ^ Control assembly initial rotation

Angular Velocity = (1:[0,0,0])
# ^ [Vec3 (rad/s)] Defines rotation about body axes in rad/s with reference to an assembly id

####################################################################################################################################################################################
[Freestream]
# ^ Controls aerodynamic freesteam conditions calculation

method = Mutationpp
# ^ [Standard/Mutationpp/GRAM] Method used for the computation of the freesteam Properties, Mutationpp and GRAM require installation of their respective codes
model = GRAM
# ^ [NRLMSISE00/GRAM] Model used to retrieve the atmospheric data, note NRLMSISE00 can only be used on Earth

####################################################################################################################################################################################
[GRAM]
# ^ Options pertaining to the NASA Global Reference Atmospheric Model (GRAM) suite for different planets

MinMaxFactor= 0.0
# ^ [Float] MinMaxFactor for the NeptuneGRAM (see NeptuneGRAM manual)
ComputeMinMaxFactor = 0
# ^ [0/1] Automatic computation of the MinMaxFactor for the NeptuneGRAM
SPICE_Path = ./Executables/SPICE
# ^ [Path] Path for the SPICE database
GRAM_Path = ./Executables/GRAM
# ^ [Path] for GRAM software (required for Earth GRAM)
Uncertain=False
# ^ [True/False] Option to perturb atmospheric conditions according to a stochastic process, inoperable unless using the uq_dev branch from github
Seed=Auto
# ^ [Int/Auto] Seed for random perturbations, use 'Auto' to determine automatically
Use_wind=True
# ^ [True/False] Add wind perturbations generated by GRAM? Inoperable unless using the uq_dev branch from github
Use_reference_traj=False
# ^ [True/False] Generate atmosphere a priori using ./Output/Data/data.csv, can give a reasonable performance boost, inoperable unless using the uq_dev branch from github

####################################################################################################################################################################################
[Uncertainty]
# ^ Controls options related to stochasticity of TITAN, inoperable unless using the uq_dev branch from github

Extract_QoI=True
# ^ [True/False] Determines whether or not to track specific Quantities of Interest (QoI)
Objects = testCube.stl, testSphere.stl, testJoint.stl
# ^ [List of .stl files] List of objects to track, referred to by .stl filename
Outputs = Latitude,Longitude,Mach
# ^ [List of output headers/demise_points] List of outputs which must correspond to headings in TITAN data file can use "demise_points" as shortcut for lat, lon and altitude
Yaml_path = /home/ckb18135/uq/UT.yaml
# ^ [Path] Path to a .yaml file to define probabilistic distributions for certain inputs
UT_DoF = 6
# ^ [3/6/12] Degrees of freedom to propagate, no clue how things work at higher numbers, guess we'll find out
UT_use_covariance = True
# ^ [True/False] Set to use a covariance defined in yaml file as opposed to computing from existing statistics
